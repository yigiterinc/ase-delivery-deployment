image: maven:3.6.3-jdk-11

before_script:
  - cd $CI_PROJECT_DIR

after_script:
  - cd $CI_PROJECT_DIR

stages:
  - build
  - test # no tests implemented
  - package
  - publish
  - deploy


### build ###
service-registry:build:
  stage: build
  script:
    - cd service-registry/ && mvn clean compile
  only:
    changes:
      - service-registry/**/*
      
api-gateway:build:
  stage: build
  script:
    - cd api-gateway/ && mvn clean compile
  only:
    changes:
      - api-gateway/**/*
      
customer-authentication-service-:build:
  stage: build
  script:
    - mkdir -p installed_deps_cas
    - cd customer-authentication-service/ && mvn clean compile
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - installed_deps_cas/
  only:
    changes:
      - customer-authentication-service/**/*


### test ###
service-registry:test:
  stage: test
  script:
    - cd service-registry/ && mvn test
  only:
    changes:
      - service-registry/**/*
      
api-gateway:test:
  stage: test
  script:
    - cd api-gateway/ && mvn test
  only:
    changes:
      - api-gateway/**/*
      
customer-authentication-service:test:
  stage: test
  script:
    - cd customer-authentication-service/ && mvn test
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - installed_deps_cas/
  only:
    changes:
      - customer-authentication-service/**/*


### package ###
service-registry:package:
  stage: package
  script:
    - cd service-registry/ && mvn package -DskipTests=true
  artifacts:
    paths:
      - service-registry/target/*.jar
  only:
    changes:
      - service-registry/**/*
      
api-gateway:package:
  stage: package
  script:
    - cd api-gateway/ && mvn package -DskipTests=true
  artifacts:
    paths:
      - api-gateway/target/*.jar
  only:
    changes:
      - api-gateway/**/*
      
customer-authentication-service:package:
  stage: package
  script:
    - cd customer-authentication-service/ && mvn package -DskipTests=true
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - installed_deps_cas/
  artifacts:
    paths:
      - customer-authentication-service/target/*.jar
  only:
    changes:
      - customer-authentication-service/**/*


### publish ###
service-registry:publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_NAME/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  variables:
    IMAGE_NAME: service-registry
  only:
    changes:
      - service-registry/*/**
      
api-gateway:publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_NAME/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  variables:
    IMAGE_NAME: api-gateway
  only:
    changes:
      - api-gateway/*/**
      
customer-authentication-service:publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_NAME/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - installed_deps_cas/
  variables:
    IMAGE_NAME: customer-authentication-service
  only:
    changes:
      - customer-authentication-service/*/**


deploy:aws:
  stage: deploy
  image: ubuntu:20.04
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$AWS_PEM_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - chmod 666 /var/run/docker.sock
    - scp -o StrictHostKeyChecking=no $DOCKER_COMPOSE_FILE $AWS_USER_HOST:~/
    - ssh $AWS_USER_HOST "docker login -u $CI_USERNAME -p $CI_PASSWORD $CI_REGISTRY"
    - ssh $AWS_USER_HOST "docker-compose -f $DOCKER_COMPOSE_FILE pull && docker-compose -f $DOCKER_COMPOSE_FILE up --force-recreate -d"
    #- 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    #- mkdir ~/.ssh && touch ~/.ssh/config
    #- eval $(ssh-agent -s)
    #- mkdir -p ~/.ssh
    #- chmod 700 ~/.ssh
    #- cat $AWS_PEM_KEY | tr -d '\r' | ssh-add -
    #- scp -r $DOCKER_COMPOSE_FILE $AWS_USER_HOST:~/
    #- ssh $AWS_USER_HOST "docker login -u $CI_USERNAME -p $CI_PASSWORD $CI_REGISTRY"
    #- ssh $AWS_USER_HOST "docker-compose -f $DOCKER_COMPOSE_FILE pull && docker-compose -f $DOCKER_COMPOSE_FILE up --force-recreate -d"
  variables:
    DOCKER_COMPOSE_FILE: docker-compose.yml
