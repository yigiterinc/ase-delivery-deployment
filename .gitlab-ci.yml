image: maven:3.6.3-jdk-11

before_script:
  - cd $CI_PROJECT_DIR

after_script:
  - cd $CI_PROJECT_DIR

stages:
  - build
  - test # no tests implemented
  - package
  - publish
  - deploy


### build ###
service-registry-build:
  stage: build
  script:
    - cd $SR_DIR/ && mvn clean compile
  artifacts:
    paths:
      - $SR_DIR/target
  only:
    changes:
      - $SR_DIR/**/*
  variables:
    SR_DIR: service-registry

api-gateway-build:
  stage: build
  script:
    - cd $AG_DIR/ && mvn clean compile
  artifacts:
    paths:
      - $AG_DIR/target
  only:
    changes:
      - $AG_DIR/**/*
  variables:
    AG_DIR: api-gateway

customer-authentication-service-build:
  stage: build
  script:
    - cd $CAS_DIR/ && mvn clean compile
  artifacts:
    paths:
      - $CAS_DIR/target
  only:
    changes:
      - $CAS_DIR/**/*
  variables:
    CAS_DIR: customer-authentication-service

delivery-service-build:
  stage: build
  script:
    - cd $DS_DIR/ && mvn clean compile
  artifacts:
    paths:
      - $DS_DIR/target
  only:
    changes:
      - $DS_DIR/**/*
  variables:
    DS_DIR: delivery-service

frontend-service-build:
  stage: build
  image: node:latest
  script:
    - cd $FRONT_END_DIR
    - npm install
  artifacts:
    paths:
      - $FRONT_END_DIR/build
      - $FRONT_END_DIR/node_modules
  only:
    changes:
      - $FRONT_END_DIR/**/*
  variables:
    FRONT_END_DIR: ase-delivery-frontend


### test ###
service-registry-test:
  stage: test
  script:
    - cd $SR_DIR/ && mvn test
  needs: [ service-registry-build ]
  dependencies:
    - service-registry-build
  only:
    changes:
      - $SR_DIR/**/*
  variables:
    SR_DIR: service-registry

api-gateway-test:
  stage: test
  script:
    - cd $AG_DIR/ && mvn test
  needs: [ api-gateway-build ]
  dependencies:
    - api-gateway-build
  only:
    changes:
      - $AG_DIR/**/*
  variables:
    AG_DIR: api-gateway

customer-authentication-service-test:
  stage: test
  script:
    - cd $CAS_DIR/ && mvn test
  needs: [ customer-authentication-service-build ]
  dependencies:
    - customer-authentication-service-build
  only:
    changes:
      - $CAS_DIR/**/*
  variables:
    CAS_DIR: customer-authentication-service

delivery-service-test:
  stage: test
  script:
    - cd $DS_DIR/ && mvn test
  needs: [ delivery-service-build ]
  dependencies:
    - delivery-service-build
  only:
    changes:
      - $DS_DIR/**/*
  variables:
    DS_DIR: delivery-service


### package ###
service-registry-package:
  stage: package
  script:
    - cd $SR_DIR/ && mvn package -DskipTests=true
  artifacts:
    paths:
      - $SR_DIR/target/*.jar
  needs: [ service-registry-build ]
  dependencies:
    - service-registry-build
  only:
    changes:
      - $SR_DIR/**/*
  variables:
    SR_DIR: service-registry

api-gateway-package:
  stage: package
  script:
    - cd $AG_DIR/ && mvn package -DskipTests=true
  artifacts:
    paths:
      - $AG_DIR/target/*.jar
  needs: [ api-gateway-build ]
  dependencies:
    - api-gateway-build
  only:
    changes:
      - $AG_DIR/**/*
  variables:
    AG_DIR: api-gateway

customer-authentication-service-package:
  stage: package
  script:
    - cd $CAS_DIR/ && mvn package -DskipTests=true
  artifacts:
    paths:
      - $CAS_DIR/target/*.jar
  needs: [ customer-authentication-service-build ]
  dependencies:
    - customer-authentication-service-build
  only:
    changes:
      - $CAS_DIR/**/*
  variables:
    CAS_DIR: customer-authentication-service

delivery-service-package:
  stage: package
  script:
    - cd $DS_DIR/ && mvn package -DskipTests=true
  artifacts:
    paths:
      - $DS_DIR/target/*.jar
  needs: [ delivery-service-build ]
  dependencies:
    - delivery-service-build
  only:
    changes:
      - $DS_DIR/**/*
  variables:
    DS_DIR: delivery-service


### publish ###
service-registry-publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_NAME/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  needs: [ service-registry-package ]
  dependencies:
    - service-registry-package
  variables:
    IMAGE_NAME: service-registry
  only:
    changes:
      - service-registry/*/**

api-gateway-publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_NAME/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  needs: [ api-gateway-package ]
  dependencies:
    - api-gateway-package
  variables:
    IMAGE_NAME: api-gateway
  only:
    changes:
      - api-gateway/*/**

customer-authentication-service-publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_NAME/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  variables:
    IMAGE_NAME: customer-authentication-service
  needs: [ customer-authentication-service-package ]
  dependencies:
    - customer-authentication-service-package
  only:
    changes:
      - customer-authentication-service/*/**

delivery-service-publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_NAME/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  variables:
    IMAGE_NAME: delivery-service
  needs: [ delivery-service-package ]
  dependencies:
    - delivery-service-package
  only:
    changes:
      - delivery-service/*/**

frontend-service-publish:
  stage: publish
  image: docker:stable
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:latest -f $IMAGE_DIR/Dockerfile .
    - docker image tag $IMAGE_NAME $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
    - docker push $CI_REGISTRY/$CI_PROJECT_LOCATION:$IMAGE_NAME
  variables:
    IMAGE_DIR: ase-delivery-frontend
    IMAGE_NAME: frontend-service
  needs: [frontend-service-build]
  dependencies:
      - frontend-service-build
  only:
    changes:
      - frontend-service/*/**


deploy-aws:
  stage: deploy
  image: ubuntu:20.04
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$AWS_PEM_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - chmod 666 /var/run/docker.sock
    - scp -o StrictHostKeyChecking=no $DOCKER_COMPOSE_FILE $AWS_USER_HOST:~/
    - ssh $AWS_USER_HOST "sudo docker login -u $CI_USERNAME -p $CI_PASSWORD $CI_REGISTRY"
    - ssh $AWS_USER_HOST "sudo docker-compose -f $DOCKER_COMPOSE_FILE pull"
    #- ssh $AWS_USER_HOST "sudo docker-compose -f $DOCKER_COMPOSE_FILE up --force-recreate -d"
  variables:
    DOCKER_COMPOSE_FILE: docker-compose.yml
